# This configuration file contains the 'jobs' which the framework will execute.
# To define a new job, use a 'section' by inserting '[name_of_section]' and define the necessary parameters you want to use.
# IMPORTANT: DIFFERENT SECTIONS MUST NOT BE NAMED EQUALLY!
# The value from the DEFAULT section will be used for all unset parameters needed for the jobs.
#
#
# **** NECESSARY PARAMETERS: ****
# sh_guess                  --> Provide the name of a shell script in the 'scripts' folder of the PGF to execute the guesser 
#                               IMPORTANT: If provided, the 'path_guess' and 'command_guess' parameters are ignored.
#                               Remember to make both the shell script and the guesser executable.
# pw_file                   --> The file containing a list of passwords to crack (provide only the filename if it is found in the 
#                               "passwordfiles" folder of the framework or provide an absolute path
# pw_format                 --> Format indicator of the password file ('plaintext_pure', 'plaintext_withcount', 'hash_pure')
#
# **** OPTIONAL PARAMETERS: ****
# terminate_guessing        --> Some guessers don't support a parameter to end the guessing process (PCFG and John the Ripper).
#                               Provide a value here and the guesser will be killed when this amount of guesses is reached.
#                               IMPORTANT: The value provided for terminate_guessing HAS TO BE dividable by 1000 as otherwise, guessers might not be killed
#                                          when using hashed input as the status lines of JtR are printed every 1000 guesses only!
#                               IMPORTANT: Don't set a DEFAULT value for this parameter as it is only required for some guessers!
# max_guesses               --> Quite the same as 'kill_guessing', just that the guesser will not be killed but receives this parameter to stop guessing
#                               automatically. Can be used for those guessers that support the '--limit' param (PRINCE) or '--maxattempts' (OMEN)
# output_file               --> Filename for the output file (it will be modified with a timestamp and a UUID).
#                               The output files will be created in the 'results' folder of the PGF.
#                               If this parameter is not specified, the job label will be used to name it accordingly.
# jtr_dir                   --> Installation path of John the Ripper (the .instance used for the hash evaluation!). In our case it was "/opt/pgf/john-hash/"
# jtr_session_name          --> Name for the John the Rippser session. The entire path needed for John will be constructed by the framework itself.
# jtr_input_format          --> Passes the '--format=[value]' parameter to the 'DEFAULT_hashing.sh' script to run John the Ripper.
#                               NOTE:      Only John's supported values can be passed and no error-checking is done by the framework
#
# **** EXTRA PARAMETERS (DEFAULT SECTION ONLY) ****
# analysis_interval         --> Define an interval in which the password candidates are analyzed (^= size of the candidates per block sent
#                               to the analysis module from the server).
#                               IMPORTANT: Change the 'interval' value in the section [List.External:AutoStatus] section of the 'john.conf' file accordingly!
#                               NOTE:      The progress of the analysis (#guesses, #cracks) is only written to the [output_file]_progress.csv file
#                                          at the end of every interval. Higher intervals will thus result in less detailed progress lines.
# backup_dir                --> Set the path of the directory to which the results of a PGF run should be backuped.
# plot_max_x_axis           --> Define the maximum value on the x-axis of the Highcharts plot (web interface).
# plot_amount_values_x_axis --> Define how many intervals the plot will have (max. amount / amount of values = interval size).
# final_processing          --> Provide the name of a shell script (in the 'scripts' folder of the PGF!) to process the output files of the jobs.
# alpha                     --> Alpha value for the analysis plugin 'entropy_calculator.py' to calculate the Partial Guessing Entropy.
#                               NOTE:      A value between 0.0 and 1.00 is required in float notation.
#
# **** PATHS TO OUR LEAKS ****
#
# /opt/pgf/leaks/myspace_guess.txt
# /opt/pgf/leaks/rockyou_guess.txt
# /opt/pgf/leaks/gmail_guess.txt
# /opt/pgf/leaks/gawker_guess.txt
# /opt/pgf/leaks/yahoo_guess.txt
# /opt/pgf/leaks/dic-0294_guess.dict
# /opt/pgf/leaks/uniqpass_guess.dict


# **** THE FOLLOWING SECTIONS ARE EXAMPLES FOR BASIC PLAINTEXT INPUT CONFIGURATION FOR ALL GUESSERS ****

[JTR_MARKOV Yahoo vs. RockYou]
sh_guess:               JTR_MARKOV.sh
training_file:          /opt/pgf/leaks/yahoo_training.txt
pw_file:                /opt/pgf/leaks/rockyou_guess.txt
pw_format:              plaintext_pure
output_file:            jtr_yahoo_rockyou_preconfig.txt
# 'max_guesses' needed  to train JtR in Markov Mode, 'terminate_guessing' needed as no '--max_guessing_attempts' (or alike) is supported by JtR!
max_guesses:            1000000
terminate_guessing:     1000000


[OMEN Yahoo vs. RockYou]
sh_guess:               OMEN.sh
training_file:          /opt/pgf/leaks/yahoo_training.txt
pw_file:                /opt/pgf/leaks/rockyou_guess.txt
pw_format:              plaintext_pure
output_file:            omen_yahoo_rockyou_preconfig.txt
max_guesses:            1000000


[PRINCE Yahoo vs. RockYou]
sh_guess:               PRINCE.sh
training_file:          /opt/pgf/leaks/yahoo_training.txt
pw_file:                /opt/pgf/leaks/rockyou_guess.txt
pw_format:              plaintext_pure
output_file:            prince_yahoo_rockyou_preconfig.txt
max_guesses:            1000000


[PCFG Yahoo vs. RockYou]
sh_guess:               PCFG.sh
training_file:          /opt/pgf/leaks/yahoo_training.txt
pw_file:                /opt/pgf/leaks/rockyou_guess.txt
pw_format:              plaintext_pure
output_file:            pcfg_yahoo_rockyou_preconfig.txt
max_guesses:            1000000
terminate_guessing:     1000000



# **** THE FOLLOWING SECTIONS ARE EXAMPLES FOR THE CONFIGURATION FOR SPECIAL INPUT (PLAINTEXT WITHCOUNT / PURE MD5-HASHES) ****
# ****
# **** NOTE THE DIFFERENT INPUT-FORMAT DESCRIPTORS AS WELL AS THE 'jtr_input_format'-PARAMETER FOR THE HASH-CASE! ****

#[PCFG Yahoo vs. RockYou WithCount]
#sh_guess:               PCFG.sh
#training_file:          /opt/pgf/leaks/yahoo_training.txt
#pw_file:                /opt/pgf/leaks/rockyou_guess_withcount.txt
#pw_format:              plaintext_withcount
#output_file:            pcfg_yahoo_rockyou_withcount_preconfig.txt
#max_guesses:            1000000
#terminate_guessing:     1000000


#[OMEN Yahoo vs. RockYou Pure Hash]
#sh_guess:               OMEN.sh
#training_file:          /opt/pgf/leaks/yahoo_training.txt
#pw_file:                /opt/pgf/leaks/rockyou_guess_md5.txt
#pw_format:              hash_pure
#output_file:            jtr_yahoo_rockyou_hash_pure_preconfig.txt
#max_guesses:            1000000
#jtr_input_format:       raw-md5






# ** **** **** DO NOT DELETE THIS FOLLOWING SECTION ! **** **** **
[DEFAULT]

sh_guess:                   None
training_file:              None
pw_file:                    None
pw_format:                  None

terminate_guessing:         None
max_guesses:                None
output_file:                None
jtr_dir:                    /opt/pgf/john-hash/
jtr_session_name:           PGF
jtr_input_format:           None

# ***** SPECIAL PARAMS (only to be set here!) *****

backup_dir:                 /opt/pgf/results/

analysis_interval:          1000

plot_max_x_axis:            100000000
plot_amount_values_x_axis:  20

final_processing:           send_noti.py

alpha:                      0.25
